/**
Publishing to maven central see: 
https://dzone.com/articles/publish-your-artifacts-to-maven-central
https://medium.com/@nmauti/sign-and-publish-on-maven-central-a-project-with-the-new-maven-publish-gradle-plugin-22a72a4bfd4b

Release process:
0. Make sure gradle props contains signing.keyId, signing.password, signing.secretKeyRingFile, sonatypeUsername, sonatypePassword
1. Set release number in this file.
2. ./gradlew publish -PmakeRelease=true
3. Go to https://oss.sonatype.org/#stagingRepositories and manually hit save and close.
	(https://central.sonatype.org/pages/releasing-the-deployment.html)

**/
plugins {
    id 'maven'
	id 'maven-publish'
	id 'signing'
	id 'java-library'
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'

// We aspire one day to be part of Eclipse January.
// Currently this package is an extension to January and
// not part of the core project
group 'io.github.h5jan'
description = 'h5jan-core'

// To sign, enter the gradle command 'gradle(w) sign'
defaultTasks 'compileJava', 'enunciate', 'check', 'compileTestJava', 'processTestResources', 'test', 'jar'

ext {
	baseVersion = "0.6.0"
    if (project.hasProperty('version')) {
		baseVersionNum = version
    }

	fullVersion = baseVersion + "-SNAPSHOT"
    if (project.hasProperty("makeRelease")) {
		fullVersion = baseVersion
	}
    
}

jar {
    baseName = 'h5jan-core'
    version = fullVersion

    from("build/docs/"){
        into("generated/docs/")
    }
    from("src/main/java"){
        include("**/*.properties")
    }
    from(".") {
     	include("lib/**")
    }    
}

sourceCompatibility = 10
targetCompatibility = 10

javadoc {
	failOnError = false
    title = "h5jan-core"
    source = sourceSets.main.allJava
    classpath = configurations.compile
    include 'io/github/h5jan/**'             // From h5jan
    exclude 'io/github/h5jan/core/NxsFile*'  // From DLS, need to fix.
    options.addStringOption('Xdoclint:none', '-quiet')
}

checkstyle {
    toolVersion = "6.12.1"
}

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination


            if (checkstyleTask == checkstyleMain && outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

task sourceJar ( type: Jar, dependsOn: classes ) {
	archiveName = "h5jan-core-sources.jar"
    classifier = 'sources'
	from sourceSets.main.allJava
    from("build/docs/"){
        into("generated/docs/")
    }
    from("src/main/java"){
        include("**/*.properties")
    }
    from(".") {
     	include("lib/**")
    }    
}

task javadocJar(type: Jar, dependsOn: classes) {
    from javadoc
    classifier = 'javadoc'
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports/coverage")
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled false
        csv.enabled false
    }
}

tasks.withType(JacocoCoverageVerification) {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification


repositories {
    mavenCentral()
    maven {
        // gradle
        url "https://plugins.gradle.org/m2/"
    }
}

/**
 The Suites are for local testing, gradle can file other unit tests
 see https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
 
 We change directory to run the tests from where junit relative paths also
 work in eclipse.
 
 **/
test {
	maxHeapSize = "4g"
    testLogging.showStandardStreams = true
    exclude '**/*Suite*'
}


dependencies {

    // Datasets
    implementation 'org.eclipse.january:org.eclipse.january:2.3.0'
    implementation 'org.eclipse.january:org.eclipse.january.asserts:2.3.0'
    
    // Tablesaw
    implementation group: 'tech.tablesaw', name: 'tablesaw-core', version: '0.34.1'
	
	// Command Line Parsing
	implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'
	implementation  'commons-io:commons-io:2.6'
	
	// https://mvnrepository.com/artifact/org.apache.commons/commons-configuration2
	compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.6'
	
	// https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
	
	// https://mvnrepository.com/artifact/org.apache.commons/commons-csv
	compile group: 'org.apache.commons', name: 'commons-csv', version: '1.7'
	
	// https://mvnrepository.com/artifact/tec.units/indriya/1.0  Units  BSD License
	implementation group: 'tec.units', name: 'indriya', version: '1.0'
	
	// https://mvnrepository.com/artifact/si.uom/si-units
	implementation group: 'si.uom', name: 'si-units', version: '2.0.1'
	
	// https://mvnrepository.com/artifact/javax.media/jai-core
	// The license of this code was the Java distribution license.
	compile group: 'javax.media', name: 'jai-core', version: '1.1.3'	
	
	// https://mvnrepository.com/artifact/it.tidalwave.imageio/it.tidalwave.imageio.raw
	compile files('lib/it.tidalwave.imageio.raw-1.6.1.jar')
	compile files('lib/jai_imageio-1.1.jar')
	
	// json
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.4'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.4'
	
	// Logging
	compile 'org.slf4j:slf4j-api:1.7.25'
	compile 'ch.qos.logback:logback-core:1.2.3'
	compile 'ch.qos.logback:logback-classic:1.2.3'

	// Test
	testCompile 'junit:junit:4.12'
	testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
	
	// Recommended in 
	// https://medium.com/@nmauti/sign-and-publish-on-maven-central-a-project-with-the-new-maven-publish-gradle-plugin-22a72a4bfd4b
	compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'com.google.guava:guava:19.0'
    compile 'com.google.code.gson:gson:2.5'
    testCompile 'com.google.truth:truth:0.28'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
        	groupId = 'io.github.h5jan'
            artifactId = 'h5jan-core'
            version = fullVersion
            
            from components.java
            artifact sourceJar {
                classifier = 'sources'
            }
            artifact javadocJar {
                classifier = 'javadoc'
            }
            
            pom {
			   name =  'h5jan-core'
			   description = 'Read and write h5 files from Java, including Datasets, nD arrays and slicing.'
			   url = 'https://github.com/h5jan/h5jan-core'
			   
			   licenses {
			        license {
			            name = 'Eclipse Public License - v 1.0'
			            url = 'https://www.eclipse.org/legal/epl-v10.html'
			        }
			    }
			    issueManagement {
			        system = 'GitHub'
			        url = 'https://github.com/h5jan/h5jan-core/issues'
			    }
			    scm {
			        url = 'https://github.com/h5jan/h5jan-core'
			        connection = 'scm:git:git://github.com/h5jan/h5jan-core.git'
			        developerConnection = 'scm:git:ssh://git@github.com:h5jan/h5jan-core.git'
			    }
			    developers {
			        developer {
			            name = 'Matthew Gerring'
			        }
			    }
            }
        }	
    }
    
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = fullVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
            	username= sonatypeUsername
            	password= sonatypePassword
            }
        }
    }
}
	
signing {
	sign publishing.publications.mavenJava
}