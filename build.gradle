/**
Publishing to maven central see: 
https://dzone.com/articles/publish-your-artifacts-to-maven-central
https://medium.com/@nmauti/sign-and-publish-on-maven-central-a-project-with-the-new-maven-publish-gradle-plugin-22a72a4bfd4b
**/
plugins {
    id "maven"
	id 'maven-publish'
	id 'signing'
	id 'java-library'
}

apply plugin: 'java'
apply plugin: "jacoco"
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'

// We aspire one day to be part of Eclipse January.
// Currently this package is an extension to January and
// not part of the core project
group 'io.github.h5jan'

ext {
	baseVersion = "0.4.0"
    if (project.hasProperty('version')) {
		baseVersionNum = version
    }

	fullVersion = baseVersion + "-SNAPSHOT"
    if (project.hasProperty("makeRelease")) {
		fullVersion = baseVersion
	}
    
}

jar {
    baseName = 'h5jan-core'
    version = fullVersion

    from("build/docs/"){
        into("generated/docs/")
    }
    from("src/main/java"){
        include("**/*.properties")
    }
    from(".") {
     	include("lib/**")
    }    
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

checkstyle {
    toolVersion = "6.12.1"
}

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination


            if (checkstyleTask == checkstyleMain && outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

task sourceJar ( type: Jar, dependsOn: classes ) {
    classifier = 'sources'
	from sourceSets.main.allJava
    from("build/docs/"){
        into("generated/docs/")
    }
    from("src/main/java"){
        include("**/*.properties")
    }
    from(".") {
     	include("lib/**")
    }    
}

task javadocJar(type: Jar, dependsOn: classes) {
    from javadoc
    classifier = 'javadoc'
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/reports/coverage")
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled false
        csv.enabled false
    }
}

tasks.withType(JacocoCoverageVerification) {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification

// To sign, enter the gradle command 'gradle(w) sign'
defaultTasks 'compileJava', 'classes', 'jar', 'sourceJar', 'javadocJar', 'compileTestJava', 'processTestResources', 'testClasses', 'findbugsMain', 'pmdMain', 'test'
description = "h5jan"

repositories {
    mavenCentral()
    maven {
        // gradle
        url "https://plugins.gradle.org/m2/"
    }
}


findbugs {
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

pmd {
    ignoreFailures = true
}

/**
 The Suites are for local testing, gradle can file other unit tests
 see https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
 
 We change directory to run the tests from where junit relative paths also
 work in eclipse.
 
 **/
test {
	maxHeapSize = "4g"
    testLogging.showStandardStreams = true
    exclude '**/*Suite*'
}


dependencies {

    // Datasets
    implementation 'org.eclipse.january:org.eclipse.january:2.3.0'
    implementation 'org.eclipse.january:org.eclipse.january.asserts:2.3.0'
    
    // Tablesaw
    implementation group: 'tech.tablesaw', name: 'tablesaw-core', version: '0.34.1'
	
	// Command Line Parsing
	implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'
	implementation  'commons-io:commons-io:2.6'
	
	// https://mvnrepository.com/artifact/org.apache.commons/commons-configuration2
	compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.6'
	
	// https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
	
	// https://mvnrepository.com/artifact/tec.units/indriya/1.0  Units  BSD License
	implementation group: 'tec.units', name: 'indriya', version: '1.0'
	
	// https://mvnrepository.com/artifact/si.uom/si-units
	implementation group: 'si.uom', name: 'si-units', version: '2.0.1'
	
	// json
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.4'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.4'
	
	// Logging
	compile 'org.slf4j:slf4j-api:1.7.25'
	compile 'ch.qos.logback:logback-core:1.2.3'
	compile 'ch.qos.logback:logback-classic:1.2.3'

	// Test
	testCompile 'junit:junit:4.12'
	testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
}


artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
        	groupId = 'io.github.h5jan'
            artifactId = 'h5jan'
            version = fullVersion
            from components.java
            artifact sourceJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'h5jan'
                description = 'A library for reading and writing datasets to HDF5'
                url = 'https://github.com/h5jan/h5jan-core'
                developers {
                    developer {
                        id = 'gerring'
                        name = 'Matthew Gerring'
                        email = 'matthew.gerring@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:h5jan/h5jan-core.git'
                    developerConnection = 'scm:git:https://github.com/h5jan/h5jan-core.git'
                    url = 'https://github.com/h5jan/h5jan-core'
                }
            }
            // create the sign pom artifact
			pom.withXml {
			    def pomFile = file("${project.buildDir}/generated-pom.xml")
			    writeTo(pomFile)
			    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
			    artifact(pomAscFile) {
			        classifier = null
			        extension = 'pom.asc'
			    }
			}
			// create the signed artifacts
			project.tasks.signArchives.signatureFiles.each {
			    artifact(it) {
			        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
			        if (matcher.find()) {
			            classifier = matcher.group(1)
			        } else {
			            classifier = null
			        }
			        extension = 'jar.asc'
			    }
			}
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}
